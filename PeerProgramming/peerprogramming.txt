Data Structures

Arrays / Strings
Contiguous values in memory that allow for random access (indexing). Can be slower for resizing operations.

Linked Lists
Values stored in nodes that are connected via pointers. Usually provided a head and/or tail pointer. Structure can be doubly linked and possibly circular if the tail has a reference to the head.

Map (Dictionary)
Stores key-value pairs for lookup. Hash map that uses a hash function on values stored for constant time lookup.

Stacks
LIFO data structure. Can be implemented in Python with basic list operations at the end of it. Used for depth first search (DFS) and is naturally created during recursive calls.

Other types of problems include balancing parentheses.

Queues
FIFO data structure. Can be implemented in Python with lists, but this is inefficient as operations at the front are O(N) as opposed to constant time. Use deque in Python instead (double-ended queue that can be used for both stacks and queues) and check for Javascript equivalent. Used to implement breadth first search.

Heap (Priority Queue)
A tree such that at each node its children are both greater than or smaller than it, based on if it’s a min or max heap. Stores the smallest (for min heap) or largest value at the root for quick access. Used in algorithms for optimal runtimes (ex. Djiktra’s), but can be useful as a standalone structure for certain problems. (merge K sorted arrays)

Note: Javascript does not have a built-in min heap, but Python does! (heapq)

Graph
A set of vertices connected by a set of edges. Edges can optionally have directions and weights. Commonly represented as an adjacency list. Can use a dictionary storing a list (or map) of connected nodes.

Very flexible data structure that can show up in many different forms. Problems can either ask questions about a graph directly, or require one to be created based on the problem. Ex: Course Schedule



Tree
Special case of a graph. Directed, acyclic with a unique path from root to each node.
Binary trees have nodes with at most 2 children and Binary Search Trees have the property that all values in the left subtree of a node are less than its value and all values in the right subtree are greater than it. In-order traversal to get the sorted order.


Algorithms
Ideas: greedy, recursion, iterative, dynamic programming, divide & conquer

Binary Search
O(log(n)) algorithm. Only works when the input is sorted. Should be able to implement on the spot. Python also provides the bisect module.

Sorting
Shouldn’t need to implement any algorithms, but it’s good to know a simple one and optimal one. Insertion sort is O(N^2) and heap sort (or merge sort) is O(N(logN)). 

Other types of sorting include radix sorting and bucket sort that are not comparison based.

Breadth First Search
Search algorithm that visits all neighbors of a node before continuing to the next level. Utilizes a queue (FIFO) structure.

Depth First Search
Search algorithm that searches a path until it ends, then backtracks. Utilizes a stack (LIFO) data structure or can be implemented naturally with recursion.

Tree traversal
Pre-order
In-order (binary search tree)
post-order

Djikstra’s
Shortest path algorithm for a weighted graph. Greedy that works when there are no negative cycles. If all weights are the same or the graph is unweighted, it is the same as breadth first search.

Khan’s
Topological sort for directed graphs. Also finds cycles in graphs (a topological sort exists if and only if there are no cycles). Idea is to visit nodes that have an in-degree of 0; this means that their dependencies have been satisfied. When visiting a node, update the nodes that it connects to by decrementing their in-degree. If at the end all nodes have not been visited, then a topological sort does not exist. Careful with edge cases of disconnected nodes.



Practice Problem(s)

Find the Kth largest element of an array (no duplicates)

Brute force
Find the biggest, then next biggest, … K

O (K * N)
K << N

Arr = [2, 1, 4, 5]
K = 2+
arr.sort((a , b) => a - b)
sortedArr = [1 , 2, 4 , 5]
// iterate through the array
Return arr(arr.length - k)


Runtime:
Time: O(nlogn)
Space: O(1)

// Min heap
Create a min heap of size K
Iterate through the array 

time : O(n * logk)
Space: O(K)

// Quickselect
O(N) avg. O(N^2)


